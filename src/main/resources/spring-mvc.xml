<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
            "
        >
<!--    <context:property-placeholder location="classpath:/*.properties" ignore-resource-not-found="true" ignore-unresolvable="true" local-override="true"/>-->
    <!-- 添加注解驱动 -->
    <mvc:annotation-driven />


    <!-- 应为Spring MVC把所有的请求都拦截了，二静态资源为特殊的 -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
    <!--<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />-->
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/">
        <mvc:resource-chain resource-cache="false" auto-registration="false">
            <mvc:resolvers>
                <bean class="org.springframework.web.servlet.resource.WebJarsResourceResolver"></bean>
                <bean class="org.springframework.web.servlet.resource.PathResourceResolver"></bean>
            </mvc:resolvers>
        </mvc:resource-chain>
    </mvc:resources>
    <mvc:resources mapping="/js/**" location="classpath:/META-INF/resources/">
        <mvc:resource-chain resource-cache="false" auto-registration="false">
            <mvc:resolvers>
                <bean class="org.springframework.web.servlet.resource.WebJarsResourceResolver"></bean>
                <bean class="org.springframework.web.servlet.resource.PathResourceResolver"></bean>
            </mvc:resolvers>
        </mvc:resource-chain>
    </mvc:resources>
    <context:component-scan base-package="com.gzcss.kurento" use-default-filters="false">
        <!--
        com.fq.controlller
        com.fq.service
        <context:component-scan base-package="com.fq.controller">
        <context:include-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
        </context:component-scan>
        可以看出要把最终的包写上，而不能这样写base-package=”com.fq”。这种写法对于include-filter来讲它都会扫描，而不是仅仅扫描@Controller。哈哈哈，这点需要注意。他一般会导致一个常见的错误，那就是事务不起作用，补救的方法是添加use-default-filters=”false”。
        -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.context.annotation.Configuration" />
     </context:component-scan>

    <!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>


    <bean class="org.springframework.web.servlet.resource.WebJarsResourceResolver" />

</beans>